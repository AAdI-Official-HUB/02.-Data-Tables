{"version":3,"sources":["TableSort.js","Api/Api.js","App.js","serviceWorker.js","index.js","TableSort.module.css"],"names":["rows","fullData","useState","columnName","direction","sorting","setSorting","searchValue","setSearchState","width","tableColumnExtensions","leftColumns","className","styles","parentTable","Paper","tableStyle","columns","name","title","value","onValueChange","onSortingChange","columnExtensions","showSortingControls","fetchApiData","a","axios","get","response","apidata","data","stateData","statewise","modifiedStateData","map","index","state","active","parseInt","confirmed","recovered","deaths","console","log","App","fetchedData","this","setState","TableSort","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"0QAkBe,cAAmB,IAQ1BA,EARyB,EAAfC,SAAe,EASDC,mBAAS,CACrC,CAAEC,WAAY,SAAUC,UAAW,SAVN,mBASxBC,EATwB,KASfC,EATe,OAYOJ,mBAAS,IAZhB,mBAYxBK,EAZwB,KAYXC,EAZW,OAaCN,mBAAS,CACvC,CAAEC,WAAY,QAASM,MAAO,KAC9B,CAAEN,WAAY,SAAUM,MAAO,KAC/B,CAAEN,WAAY,YAAaM,MAAO,KAClC,CAAEN,WAAY,SAAUM,MAAO,KAC/B,CAAEN,WAAY,YAAaM,MAAO,OAL7BC,EAbwB,sBAoBTR,mBAAS,CAAC,QAAS,YAAlCS,EApBwB,oBAqB/B,OACE,yBAAKC,UAAWC,IAAOC,aACrB,kBAACC,EAAA,EAAD,CAAOH,UAAWC,IAAOG,YACvB,kBAAC,IAAD,CAAMhB,KAAMA,EAAMiB,QAvBR,CACd,CAAEC,KAAM,QAASC,MAAO,UACxB,CAAED,KAAM,SAAUC,MAAO,UACzB,CAAED,KAAM,YAAaC,MAAO,aAC5B,CAAED,KAAM,SAAUC,MAAO,UACzB,CAAED,KAAM,YAAaC,MAAO,eAmBtB,kBAAC,IAAD,CAAaC,MAAOb,EAAac,cAAeb,IAEhD,kBAAC,IAAD,CAAcH,QAASA,EAASiB,gBAAiBhB,IACjD,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAOiB,iBAAkBb,IACzB,kBAAC,IAAD,CAAgBc,qBAAmB,IACnC,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAmBb,YAAaA,Q,iBChD7Bc,EAAY,uCAAG,kCAAAC,EAAA,+EAEGC,IAAMC,IAJzB,0CAEgB,cAEdC,EAFc,OAGdC,EAAUD,EAASE,KACnBC,EAAYF,EAAQG,UACpBC,EAAoBF,EAAUG,KAAI,SAACC,GAAD,MAAU,CAC9CC,MAAMD,EAAMC,MACZC,OAAOC,SAASH,EAAME,QACtBE,UAAWD,SAASH,EAAMI,WAC1BC,UAAWF,SAASH,EAAMK,WAC1BC,OAAQH,SAASH,EAAMM,YAVP,kBAabR,GAba,kCAerBS,QAAQC,IAAR,MAfqB,0DAAH,qDAkBzBnB,I,ICWeoB,E,kDA3Bb,aAAe,IAAD,8BACZ,gBACKR,MAAQ,CACXpC,SAAU,IAHA,E,yMAQgBwB,I,OAApBqB,E,OACNC,KAAKC,SAAS,CACZ/C,SAAU6C,I,gDAGZH,QAAQC,IAAR,M,8IAIG,IACC3C,EAAa8C,KAAKV,MAAlBpC,SACR,OACE,6BACE,kBAACgD,EAAD,CAAWhD,SAAUA,S,GAtBTiD,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,6BACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,a,mBExI5BC,EAAOC,QAAU,CAAC,YAAc,+BAA+B,WAAa,gC","file":"static/js/main.8dee01de.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport styles from \"./TableSort.module.css\";\r\nimport {\r\n  SortingState,\r\n  IntegratedSorting,\r\n  SearchState,\r\n  IntegratedFiltering,\r\n} from \"@devexpress/dx-react-grid\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  TableHeaderRow,\r\n  Toolbar,\r\n  SearchPanel,\r\n  TableFixedColumns,\r\n} from \"@devexpress/dx-react-grid-material-ui\";\r\n\r\nexport default ({ fullData }) => {\r\n  const columns = [\r\n    { name: \"state\", title: \"States\" },\r\n    { name: \"active\", title: \"Active\" },\r\n    { name: \"confirmed\", title: \"Confirmed\" },\r\n    { name: \"deaths\", title: \"Deaths\" },\r\n    { name: \"recovered\", title: \"Recovered\" },\r\n  ];\r\n  const rows = fullData;\r\n  const [sorting, setSorting] = useState([\r\n    { columnName: \"active\", direction: \"asc\" },\r\n  ]);\r\n  const [searchValue, setSearchState] = useState(\"\");\r\n  const [tableColumnExtensions] = useState([\r\n    { columnName: \"state\", width: 220 },\r\n    { columnName: \"active\", width: 120 },\r\n    { columnName: \"confirmed\", width: 120 },\r\n    { columnName: \"deaths\", width: 120 },\r\n    { columnName: \"recovered\", width: 120 },\r\n  ]);\r\n  const [leftColumns] = useState([\"state\", \"channel\"]);\r\n  return (\r\n    <div className={styles.parentTable}>\r\n      <Paper className={styles.tableStyle}>\r\n        <Grid rows={rows} columns={columns}>\r\n          <SearchState value={searchValue} onValueChange={setSearchState} />\r\n\r\n          <SortingState sorting={sorting} onSortingChange={setSorting} />\r\n          <IntegratedFiltering />\r\n          <IntegratedSorting />\r\n          <Table columnExtensions={tableColumnExtensions} />\r\n          <TableHeaderRow showSortingControls />\r\n          <Toolbar />\r\n          <SearchPanel />\r\n          <TableFixedColumns leftColumns={leftColumns} />\r\n        </Grid>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://api.covid19india.org/data.json\";\r\n\r\nexport const fetchApiData = async () =>{\r\n    try {\r\n        const response = await axios.get(url);\r\n        const apidata = response.data\r\n        const stateData = apidata.statewise\r\n        const modifiedStateData = stateData.map((index)=>({\r\n            state:index.state,\r\n            active:parseInt(index.active),\r\n            confirmed: parseInt(index.confirmed),\r\n            recovered: parseInt(index.recovered),\r\n            deaths: parseInt(index.deaths),\r\n        }\r\n        ));\r\n        return modifiedStateData\r\n    } catch (error) {\r\n       console.log(error) \r\n    }\r\n}\r\nfetchApiData();","import React, { Component } from 'react';\nimport './App.css';\nimport TableSort from './TableSort.js';\nimport {fetchApiData} from './Api/Api';\n\nclass App extends Component{\n  constructor() { \n    super();\n    this.state = {\n      fullData: [],\n    };\n  }\n  async componentDidMount() {\n    try {\n      const fetchedData = await fetchApiData();\n      this.setState({\n        fullData: fetchedData,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  \nrender(){\n  const { fullData } = this.state;\n  return (\n    <div>\n      <TableSort fullData={fullData}/>\n    </div>\n  )\n}\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <div>\n    <App />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"parentTable\":\"TableSort_parentTable__2cJ0Q\",\"tableStyle\":\"TableSort_tableStyle__1Mban\"};"],"sourceRoot":""}